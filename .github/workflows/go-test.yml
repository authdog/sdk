name: Go SDK Tests

on:
  workflow_dispatch:
  # push:
  #   branches: [ main, develop ]
  #   paths:
  #     - 'go/**'
  #     - '.github/workflows/go-test.yml'
  # pull_request:
  #   branches: [ main, develop ]
  #   paths:
  #     - 'go/**'
  #     - '.github/workflows/go-test.yml'

env:
  GO_VERSION: "1.21"

jobs:
  test:
    name: Test Go SDK
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        go-version: ["1.21", "1.20"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
        cache-dependency-path: go/go.sum

    - name: Verify Go installation
      run: |
        go version
        go env

    - name: Install dependencies
      run: |
        cd go
        go mod download
        go mod verify

    - name: Run go vet
      run: |
        cd go
        go vet ./...

    - name: Run go fmt check
      run: |
        cd go
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run tests with coverage
      run: |
        cd go
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: |
        cd go
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: go-coverage-${{ matrix.go-version }}
        path: go/coverage.*

  build:
    name: Build Go SDK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go/go.sum

    - name: Build Go module
      run: |
        cd go
        go build -v ./...

    - name: Test module compilation
      run: |
        cd go
        go build -o /tmp/authdog-test ./...

  lint:
    name: Lint Go SDK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go/go.sum

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        working-directory: go

    - name: Run golangci-lint
      run: |
        cd go
        golangci-lint run --timeout=5m --out-format=colored-line-number

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go/go.sum

    - name: Install gosec
      run: go install github.com/securego/gosec/v2/cmd/gosec@latest

    - name: Run gosec security scan
      run: |
        cd go
        gosec ./...

  benchmark:
    name: Benchmark Go SDK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true
        cache-dependency-path: go/go.sum

    - name: Run benchmarks
      run: |
        cd go
        go test -bench=. -benchmem ./...

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: go-benchmark-results
        path: go/benchmark.txt
